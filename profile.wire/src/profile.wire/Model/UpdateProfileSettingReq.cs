/*
 * TP.Profile.Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = profile.wire.Client.OpenAPIDateConverter;

namespace profile.wire.Model
{
    /// <summary>
    /// UpdateProfileSettingReq
    /// </summary>
    [DataContract(Name = "UpdateProfileSettingReq")]
    public partial class UpdateProfileSettingReq : IEquatable<UpdateProfileSettingReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProfileSettingReq" /> class.
        /// </summary>
        /// <param name="available">available.</param>
        /// <param name="timeIncludeFrom">timeIncludeFrom.</param>
        /// <param name="timeIncludeTo">timeIncludeTo.</param>
        /// <param name="dateExcludeFrom">dateExcludeFrom.</param>
        /// <param name="dateExcludeTo">dateExcludeTo.</param>
        public UpdateProfileSettingReq(bool? available = default(bool?), int? timeIncludeFrom = default(int?), int? timeIncludeTo = default(int?), long? dateExcludeFrom = default(long?), long? dateExcludeTo = default(long?))
        {
            this.Available = available;
            this.TimeIncludeFrom = timeIncludeFrom;
            this.TimeIncludeTo = timeIncludeTo;
            this.DateExcludeFrom = dateExcludeFrom;
            this.DateExcludeTo = dateExcludeTo;
        }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool? Available { get; set; }

        /// <summary>
        /// Gets or Sets TimeIncludeFrom
        /// </summary>
        [DataMember(Name = "timeIncludeFrom", EmitDefaultValue = true)]
        public int? TimeIncludeFrom { get; set; }

        /// <summary>
        /// Gets or Sets TimeIncludeTo
        /// </summary>
        [DataMember(Name = "timeIncludeTo", EmitDefaultValue = true)]
        public int? TimeIncludeTo { get; set; }

        /// <summary>
        /// Gets or Sets DateExcludeFrom
        /// </summary>
        [DataMember(Name = "dateExcludeFrom", EmitDefaultValue = true)]
        public long? DateExcludeFrom { get; set; }

        /// <summary>
        /// Gets or Sets DateExcludeTo
        /// </summary>
        [DataMember(Name = "dateExcludeTo", EmitDefaultValue = true)]
        public long? DateExcludeTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateProfileSettingReq {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  TimeIncludeFrom: ").Append(TimeIncludeFrom).Append("\n");
            sb.Append("  TimeIncludeTo: ").Append(TimeIncludeTo).Append("\n");
            sb.Append("  DateExcludeFrom: ").Append(DateExcludeFrom).Append("\n");
            sb.Append("  DateExcludeTo: ").Append(DateExcludeTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateProfileSettingReq);
        }

        /// <summary>
        /// Returns true if UpdateProfileSettingReq instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateProfileSettingReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateProfileSettingReq input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                ) && 
                (
                    this.TimeIncludeFrom == input.TimeIncludeFrom ||
                    (this.TimeIncludeFrom != null &&
                    this.TimeIncludeFrom.Equals(input.TimeIncludeFrom))
                ) && 
                (
                    this.TimeIncludeTo == input.TimeIncludeTo ||
                    (this.TimeIncludeTo != null &&
                    this.TimeIncludeTo.Equals(input.TimeIncludeTo))
                ) && 
                (
                    this.DateExcludeFrom == input.DateExcludeFrom ||
                    (this.DateExcludeFrom != null &&
                    this.DateExcludeFrom.Equals(input.DateExcludeFrom))
                ) && 
                (
                    this.DateExcludeTo == input.DateExcludeTo ||
                    (this.DateExcludeTo != null &&
                    this.DateExcludeTo.Equals(input.DateExcludeTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Available != null)
                {
                    hashCode = (hashCode * 59) + this.Available.GetHashCode();
                }
                if (this.TimeIncludeFrom != null)
                {
                    hashCode = (hashCode * 59) + this.TimeIncludeFrom.GetHashCode();
                }
                if (this.TimeIncludeTo != null)
                {
                    hashCode = (hashCode * 59) + this.TimeIncludeTo.GetHashCode();
                }
                if (this.DateExcludeFrom != null)
                {
                    hashCode = (hashCode * 59) + this.DateExcludeFrom.GetHashCode();
                }
                if (this.DateExcludeTo != null)
                {
                    hashCode = (hashCode * 59) + this.DateExcludeTo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
