/*
 * TP.Profile.Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = profile.wire.Client.OpenAPIDateConverter;

namespace profile.wire.Model
{
    /// <summary>
    /// UpdatePasswordReq
    /// </summary>
    [DataContract(Name = "UpdatePasswordReq")]
    public partial class UpdatePasswordReq : IEquatable<UpdatePasswordReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePasswordReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdatePasswordReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePasswordReq" /> class.
        /// </summary>
        /// <param name="oldPassword">oldPassword (required).</param>
        /// <param name="newPassword">newPassword (required).</param>
        public UpdatePasswordReq(string oldPassword = default(string), string newPassword = default(string))
        {
            // to ensure "oldPassword" is required (not null)
            if (oldPassword == null)
            {
                throw new ArgumentNullException("oldPassword is a required property for UpdatePasswordReq and cannot be null");
            }
            this.OldPassword = oldPassword;
            // to ensure "newPassword" is required (not null)
            if (newPassword == null)
            {
                throw new ArgumentNullException("newPassword is a required property for UpdatePasswordReq and cannot be null");
            }
            this.NewPassword = newPassword;
        }

        /// <summary>
        /// Gets or Sets OldPassword
        /// </summary>
        [DataMember(Name = "oldPassword", IsRequired = true, EmitDefaultValue = true)]
        public string OldPassword { get; set; }

        /// <summary>
        /// Gets or Sets NewPassword
        /// </summary>
        [DataMember(Name = "newPassword", IsRequired = true, EmitDefaultValue = true)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePasswordReq {\n");
            sb.Append("  OldPassword: ").Append(OldPassword).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePasswordReq);
        }

        /// <summary>
        /// Returns true if UpdatePasswordReq instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePasswordReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePasswordReq input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OldPassword == input.OldPassword ||
                    (this.OldPassword != null &&
                    this.OldPassword.Equals(input.OldPassword))
                ) && 
                (
                    this.NewPassword == input.NewPassword ||
                    (this.NewPassword != null &&
                    this.NewPassword.Equals(input.NewPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldPassword != null)
                {
                    hashCode = (hashCode * 59) + this.OldPassword.GetHashCode();
                }
                if (this.NewPassword != null)
                {
                    hashCode = (hashCode * 59) + this.NewPassword.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
